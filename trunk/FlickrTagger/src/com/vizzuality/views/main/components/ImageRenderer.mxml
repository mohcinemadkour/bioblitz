<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="220" height="180" color="#040404" creationComplete="{initRenderer()}" verticalScrollPolicy="off" 
	horizontalScrollPolicy="off" xmlns:components="com.vizzuality.components.*" verticalCenter="0" horizontalCenter="0" xmlns:components1="com.vizzuality.views.main.components.*">
        
        <mx:Script>
                <![CDATA[
                	import mx.effects.easing.Back;
                	import mx.core.IUIComponent;
                	import mx.core.DragSource;
                	import mx.core.UIComponent;
                	import mx.managers.DragManager;
                	import mx.events.DragEvent;
                	import mx.collections.ArrayCollection;
                	import mx.utils.ArrayUtil;
                	import com.vizzuality.components.TileListFlickTagger;
                	import com.vizzuality.views.main.ImagesContainer;
                	import mx.core.Application;
                    import com.vizzuality.dao.FlickrUploadService;
                    import mx.core.IFlexDisplayObject;
                    import mx.managers.PopUpManager;
                    import mx.events.EffectEvent;
                    import mx.events.ChildExistenceChangedEvent;
                    import mx.effects.RemoveItemAction;
                    import mx.controls.Alert;
                    import mx.events.ListEvent;
                    import mx.events.FlexEvent;
                    import mx.managers.PopUpManager;
                    
                    private var outerList:TileListFlickTagger;
                    private var popUpImage:PopUpManagerImage = new PopUpManagerImage();
                    
                    [Bindable]private var inputColor: uint;
                    [Bindable]private var path: String;
                    [Bindable]private var canvasBkg: String;
                    [Bindable]private var uploading: Boolean;  
                    [Bindable]private var textButton: String; 
                    [Bindable]private var textInput: String;  
                    [Bindable]private var shadowVisible: Boolean;
                    [Bindable]private var backgroundInputAlpha: int;
                    private var imagesDir:String = File.applicationStorageDirectory.resolvePath("images").nativePath;
                    
                                  
                    
                    override public function set data(value:Object):void{

						  if (value != null) {
						  	 canvasBkg = (value.group_total!=undefined)?'photoGroupBkg':'photoBkg';
						     path = getImageUrlInsideApp(value.path);
						     //If there is scientific name
						     uploading = (value.uploading==undefined)?false:value.uploading;
						     backgroundInputAlpha = 0;						     	
						     
						     //If there is scientific name
						     if (value.scientific == null || value.scientific == "") {						
						     	textInput = 'Not recognized';
						     	inputColor = 0x050505;
						     	shadowVisible = true;
						     } else {
						     	textInput = value.scientific;
						     	inputColor = 0xBBBBBB;
						     	shadowVisible = false;	
						     }
						  } else {
						  	 inputColor = 0xf65951;
						  	 textInput = "";
						  	 path = ""; 
						  	 uploading = false;
						  }
						  super.data = value;
					}
					
					
                    private function initRenderer():void {
                    	if (this.parentDocument is ImagesContainer) {
                    		this.outerList = (this.parentDocument as ImagesContainer).tilelist;
                        	this.outerList.addEventListener(ListEvent.CHANGE, updateSelected); 
                        	this.addEventListener(FlexEvent.DATA_CHANGE, checkSelected);
                    	}
                    }
                    
                    
                    
                    
                    private function getImageUrlInsideApp(externalPath:String):String {
						var fileName:String = externalPath.replace("file://","").replace(/\//g,'_');
			          	fileName.replace("gif","jpg").replace("png","jpg").replace("GIF","jpg").replace("PNG","jpg").replace("JPG","jpg");
						return File.applicationStorageDirectory.resolvePath(imagesDir + "/"+fileName).url;
					}
                    
                     
                 
                    
                    private function updateScientificName():void {
                            (this.parentDocument as ImagesContainer).updateName(scientificNameInput.text,data.path);  
                            textInput = scientificNameInput.text;
                            data.scientific = textInput;            
                            changeColorInput();                             
                    }
                    
                    private function changeColorInput():void {
                        if(textInput =='' || textInput == 'Not recognized') {
                        	inputColor = 0x000000;
                        	shadowVisible = true;
                        } else {
                            inputColor = 0xBBBBBB;
                            shadowVisible = false;
                        }
                    }
                    
                    
                    private function onFocusOutInput():void {
                    	scientificNameInput.setStyle('backgroundAlpha','0');
                    	if (scientificNameInput.text=='') {
                    		scientificNameInput.text="Not recognized";
                    	}
                    }
                    
                    
                    private function updateSelected(event:ListEvent):void {
						var selected:Boolean = false;
					  	if(this.outerList.allowMultipleSelection) {
					  		var aux_array:ArrayCollection = new ArrayCollection(this.outerList.selectedItems);
					    	selected = Boolean((aux_array).getItemIndex(this.data) != -1);
					  	} else {
					    	selected = Boolean(event.itemRenderer == this);
					  	}
                    	
						if(selected) {
         					flickrButton.alpha = 1;
         					deleteButton.alpha = 1;
						} else {
							flickrButton.alpha = 0;
         					deleteButton.alpha = 0;
						}
                    }
                    
                    private function checkSelected(event:FlexEvent):void {
					  	var aux_array:ArrayCollection = new ArrayCollection(this.outerList.selectedItems);
                        if (this.outerList.selectedItem == this.data || ((aux_array).getItemIndex(this.data) != -1)) {
         					flickrButton.alpha = 1;
         					deleteButton.alpha = 1;
                        } else {
							flickrButton.alpha = 0;
         					deleteButton.alpha = 0;
         				}
                    }
                    
                    
                    
                    
                    private function uploadImage():void {
                        uploading = true;
                        this.data.uploading = true;
                        scientificNameInput.setStyle('backgroundAlpha','1');
                        var upFlickr: FlickrUploadService = new FlickrUploadService();
                        if (this.data.group_total == undefined) {
                        	upFlickr.resolveTagsFlickr(this.data);
                        } else {
                        	upFlickr.resolveGroupTagsFlickr(this.data);
                        }
                    }
   
                    

                    
                    private function changeScientificName():void {
                        scientificNameInput.setStyle('backgroundAlpha','1');
                        if (scientificNameInput.text == "Not recognized") {
                                scientificNameInput.text = "";
                        }
                    }
                    
                    
                    
                    /* Delete images functions */
                    
                    private function eraseImage():void {
                    	deleteConfirmation.visible = false;
                    	if (this.data.group_total==undefined) {
                            (this.parentDocument as ImagesContainer).deleteImage(data.path,1);
                    	} else {
                    		(this.parentDocument as ImagesContainer).deleteGroupImages(this.data.id);
                    	}
                    }                       
                    
                    
                    private function onDeleteButton():void {
                    	scientificNameInput.enabled = false;
                    	deleteButton.visible = false;
                    	flickrButton.visible = false;
                    	deleteConfirmation.visible = true;
                    }
                    
                    
                    private function onCancelDelete():void {
                    	scientificNameInput.enabled = true;
                    	deleteButton.visible = true;
                    	flickrButton.visible = true;
                    	deleteConfirmation.visible = false;
                    }
                    
		            
                ]]>
        </mx:Script>
        
                      
        
        <mx:Canvas id="itemSpace" height="157" width="197" verticalScrollPolicy="off" horizontalScrollPolicy="off" horizontalCenter="0" top="0"
        	styleName="{canvasBkg}" backgroundSize="100%">
			<mx:Image source="{path}" verticalCenter="0" horizontalCenter="0"/>
        </mx:Canvas>
        <!--<mx:Image source="@Embed('com/vizzuality/assets/geotagged.png')"  width="28" height="25" y="120" horizontalCenter="0"/>-->
        <mx:Label text="Not recognized" horizontalCenter="0" bottom="0" color="#363636" fontSize="13" fontFamily="Arial" fontWeight="bold" visible="{shadowVisible}"/>
        <mx:TextInput id="scientificNameInput" text="{textInput}" click="changeScientificName()" focusOut="onFocusOutInput()" change="updateScientificName()" textAlign="center" maxWidth="181" backgroundAlpha="{backgroundInputAlpha}"
        	creationComplete="changeColorInput()" height="24" styleName="titlePhotoTxtInput" horizontalCenter="0" bottom="0" paddingTop="2" paddingBottom="2" color="{inputColor}"
        	enabled="{!uploading}"/>
		<mx:Button label="" fontSize="10" click="uploadImage()" width="28" id="flickrButton" height="28" visible="{!uploading}" x="10" y="0" alpha="0" styleName="uploadGreenBtn"
			buttonMode="true" mouseChildren="false" useHandCursor="true"/>
        <mx:Button label="" fontSize="10" click="onDeleteButton()" width="28" id="deleteButton" height="28" visible="{!uploading}" x="180" y="0" alpha="0" 
        	styleName="deleteRedBtn" buttonMode="true" mouseChildren="false" useHandCursor="true"/>  
        	
        <mx:Canvas id="loading" verticalCenter="-8" horizontalCenter="0" width="86" height="86" visible="{uploading}" styleName="spinnerBkg" horizontalScrollPolicy="off" 
        	verticalScrollPolicy="off">
        	<mx:SWFLoader source="/com/vizzuality/assets/loading.swf" y="15" id="swfloader1" horizontalCenter="0"/>
			<mx:Label id="bar" text="Uploading" y="55" color="#f9f9f9" fontSize="13" height="23" horizontalCenter="0" fontWeight="bold" fontFamily="Arial"/>
        </mx:Canvas>
        
        <components1:DeleteConfirmation id="deleteConfirmation" verticalCenter="-15" kind="{(data.group_total!=undefined)?'group':'image'}" 
        	visible="false" deleteImages="eraseImage()" cancelDelete="onCancelDelete()"  horizontalCenter="0"/>     	
        	
        
</mx:Canvas>