<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="220" height="180" color="#040404" creationComplete="{initRenderer()}" verticalScrollPolicy="off"
	horizontalScrollPolicy="off" xmlns:components="com.vizzuality.components.*" verticalCenter="0" horizontalCenter="0" xmlns:components1="com.vizzuality.views.main.components.*">
        
        <mx:Script>
                <![CDATA[
                	import mx.managers.PopUpManager;
                	import com.vizzuality.dao.DataAccessObject;
                	import com.vizzuality.event.SendCommentEvent;
					import com.vizzuality.components.TileListFlickTagger;
					import com.vizzuality.dao.FlickrUploadService;
					import com.vizzuality.event.GetTaxonEvent;
					import com.vizzuality.event.SelectedSpecieEvent;
					import com.vizzuality.views.main.ImagesContainer;
					
					import mx.collections.ArrayCollection;
					import mx.core.Application;
					import mx.core.IFlexDisplayObject;
					import mx.core.IUIComponent;
					import mx.core.UIComponent;
					import mx.effects.RemoveItemAction;
					import mx.events.ChildExistenceChangedEvent;
					import mx.events.FlexEvent;
					import mx.events.ListEvent;
					import mx.utils.ArrayUtil;
                    
                    [Bindable]private var uploading: Boolean;  
                    [Bindable]private var textInput: String;  
                    [Bindable]private var canvasBkg: String;
                    [Bindable]private var geotagged: Boolean;
                    [Bindable]private var selected: Boolean;
                    [Bindable]private var path: String;
                    [Bindable]private var group: Boolean;
                    private var outerList:TileListFlickTagger;
                    private var imageMap:ImageMap = new ImageMap();
                    private var imagesDir:String = File.applicationStorageDirectory.resolvePath("images").nativePath;
                    private var dao: DataAccessObject= new DataAccessObject();
                    
                                  
                    
                    override public function set data(value:Object):void{

						if (value != null) {
						  	 // Geotagged?
						  	 (value.lat !=null && value.lat!=undefined && value.lat!="undefined")?geotagged = true:geotagged = false;
						  	 
						  	 // Scientific Name?
						  	 (value.scientific == null || value.scientific == "Not identified" || value.scientific == undefined)?textInput = "Not identified":textInput = value.scientific;						  	 
						  	 
						  	 // Single <> Group && Selected <> Unselected
						  	 if (value.group_total != undefined) {		
						  	 	group = true;				
						     	canvasBkg = (value.selected==true)?'photoGroupBkgSelected':'photoGroupBkg';
						     } else {
						     	group = false;
						     	canvasBkg = (value.selected==true)?'photoBkgSelected':'photoBkg';
						     }

						  	 path = getImageUrlInsideApp(value.path);
						     uploading = (value.uploading==undefined)?false:value.uploading;

						  } else {
						  	 uploading = false;
						  }
						  super.data = value;
					}
					
					
                    private function initRenderer():void {
                    	if (this.parentDocument is ImagesContainer) {
                    		this.outerList = (this.parentDocument as ImagesContainer).tilelist;
                        	this.outerList.addEventListener(ListEvent.CHANGE, updateSelected); 
                        	this.addEventListener(FlexEvent.DATA_CHANGE, checkSelected);
                    	}
                    }
                    
                    
                    
                    
                    private function getImageUrlInsideApp(externalPath:String):String {
						var fileName:String = externalPath.replace("file://","").replace(/\//g,'_');
			          	fileName.replace("gif","jpg").replace("png","jpg").replace("GIF","jpg").replace("PNG","jpg").replace("JPG","jpg");
						return File.applicationStorageDirectory.resolvePath(imagesDir + "/"+fileName).url;
					}
                    
                     
                    
                    private function updateScientificName(ev:Event):void {
                    	var coords:Point = new Point(scientificNameInput.x,scientificNameInput.y);
                        coords = scientificNameInput.localToGlobal(coords);
                        dispatchEvent(new GetTaxonEvent(GetTaxonEvent.RESULT,scientificNameInput.text,coords,true));
                        data.editing = true;
                        var group_id:int = (data.group_total!=undefined && data.group_total!=null)?data.id:-1;
                        (this.parentDocument as ImagesContainer).updateName(scientificNameInput.text,data.path,group_id);  
                        textInput = scientificNameInput.text;
                        data.scientific = textInput;            
                    }
                    
                    

                    
                    private function updateSelected(event:ListEvent):void {
					  	if(this.outerList.allowMultipleSelection) {
					  		var aux_array:ArrayCollection = new ArrayCollection(this.outerList.selectedItems);
					    	selected = Boolean((aux_array).getItemIndex(this.data) != -1);
					  	} else {
					    	selected = Boolean(event.itemRenderer == this);
					  	}
						//This IF is a HACK, no idea why this can get null, Javi2?
						if(data) {
						  	data.selected = selected;
							if (data.group_total != undefined) {						
						     	canvasBkg = (selected!=false)?'photoGroupBkgSelected':'photoGroupBkg';
						    } else {
						     	canvasBkg = (selected!=false)?'photoBkgSelected':'photoBkg';
						    }
						}
					  	
					  	
                    }
                    
                    
                    
                    private function checkSelected(event:FlexEvent):void {
					  	var aux_array:ArrayCollection = new ArrayCollection(this.outerList.selectedItems);
                        if (this.outerList.selectedItem == this.data || ((aux_array).getItemIndex(this.data) != -1)) {
         					selected = true;
         					if (data!=null)
         						data.selected = true;
                        } else {
							selected = false;
							if (data!=null)
								data.selected = false;
         				}
                    }
                    
                    
                    
                    private function onInputFocusOut():void {
                    	data.editing = false;
                    	dispatchEvent(new Event("onFocusInputOut",true));
                    	if (scientificNameInput.text == "") {
                    		scientificNameInput.text = "Not identified";
                    	}
                    }
                    
                    
                    
                    private function uploadImage():void {
                    	data.editing = false;
                        uploading = true;
                        this.data.uploading = true;
                        scientificNameInput.setStyle('backgroundAlpha','1');
                        var upFlickr: FlickrUploadService = new FlickrUploadService();
                        if (this.data.group_total == undefined) {
                        	upFlickr.resolveTagsFlickr(this.data);
                        } else {
                        	upFlickr.resolveGroupTagsFlickr(this.data);
                        }
                    }
   
                    

                    
                    private function changeScientificName():void {
                        if (scientificNameInput.text == "Not identified" && !uploading) {
                                scientificNameInput.text = "";
                        }
                    }
                    
                    
                    private function onDoubleClick(event:MouseEvent):void {
                    	if (data.group_total != undefined && data.group_total>0) {
                    		(this.parentDocument as ImagesContainer).showGroupPhotos(data.id);
                    	}
                    }
                    
                    
                    
                    /* Delete images functions */
                    
                    private function eraseImage():void {
                    	deleteConfirmation.visible = false;
                    	if (this.data.group_total==undefined) {
                            (this.parentDocument as ImagesContainer).deleteImage(data.path,1);
                    	} else {
                    		(this.parentDocument as ImagesContainer).deleteGroupImages(this.data.id);
                    	}
                    	scientificNameInput.enabled = true;
                    	deleteButton.visible = true;
                    	flickrButton.visible = true;
                    }                       
                    
                    
                    private function onDeleteButton():void {
                    	scientificNameInput.enabled = false;
                    	deleteButton.visible = false;
                    	flickrButton.visible = false;
                    	deleteConfirmation.visible = true;
                    }
                    
                    
                    private function onCancelDelete():void {
                    	scientificNameInput.enabled = true;
                    	deleteButton.visible = true;
                    	flickrButton.visible = true;
                    	deleteConfirmation.visible = false;
                    }
                    
                    
                    
                    /* Edit comment functions */
                    
                    private function onEditButton():void {
                    	if (!commentArea.visible) {
                    		scientificNameInput.enabled = false;
                    		deleteButton.visible = false;
                    		flickrButton.visible = false;
                    		commentArea.visible = true;
                    	} else {
                    		scientificNameInput.enabled = true;
                    		deleteButton.visible = true;
                    		flickrButton.visible = true;
                    		commentArea.visible = false;
                    	}
                    }
                    
                    private function onChangeComment(event:SendCommentEvent):void {
                    	this.data.comment = event.comment;
                    	if (data.group_total != undefined && data.group_total>0) {
                    		dao.openConnection("UPDATE groups SET comment='"+event.comment+"' WHERE path='"+path+"'");
                    	} else {
                    		dao.openConnection("UPDATE photos SET comment='"+event.comment+"' WHERE path='"+path+"'");
                    	}
                    }
                    
                    
                    private function showPosition(event:MouseEvent):void {
                    	imageMap.source = "http://maps.google.com/maps/api/staticmap?center="+data.lat+","+data.lon+"&zoom=10&size=300x300\&markers=color:blue|label:S|"+data.lat+","+data.lon+"&sensor=false";
		                PopUpManager.addPopUp(imageMap,this,true);
                    }
                    
                    
                ]]>
        </mx:Script>
        
                      
        
        <mx:Canvas id="itemSpace" height="157" width="197" verticalScrollPolicy="off" horizontalScrollPolicy="off" horizontalCenter="0" top="0"
        	styleName="{canvasBkg}" backgroundSize="100%" doubleClick="onDoubleClick(event)" doubleClickEnabled="true">
			<mx:Image source="{path}" verticalCenter="0" horizontalCenter="0"/>
        </mx:Canvas>
        <mx:Image source="@Embed('com/vizzuality/assets/geotagged.png')"  width="28" height="25" y="120" horizontalCenter="0" visible="{geotagged}" click="showPosition(event)" useHandCursor="true"
        	buttonMode="true" mouseChildren="false"/>
        <mx:TextInput id="scientificNameInput" text="{textInput}" click="changeScientificName()" change="updateScientificName(event)" textAlign="center" maxWidth="181" 
        	backgroundAlpha="{selected?1:0}" height="24" styleName="titlePhotoTxtInput" horizontalCenter="0" bottom="0" paddingTop="2" paddingBottom="2" 
        	enabled="{!uploading}" color="{(textInput=='Not identified')?0x666666:0xBBBBBB}" focusOut="onInputFocusOut()"/>
		<mx:Button label="" fontSize="10" click="uploadImage()" width="28" id="flickrButton" height="28" visible="{!uploading}" x="10" y="0" alpha="{selected?1:0}" styleName="uploadGreenBtn"
			buttonMode="true" mouseChildren="false" useHandCursor="true"/>
        <mx:Button label="" fontSize="10" click="onDeleteButton()" width="28" id="deleteButton" height="28" visible="{!uploading}" x="180" y="0" alpha="{selected?1:0}" 
        	styleName="deleteRedBtn" buttonMode="true" mouseChildren="false" useHandCursor="true"/>  
        <mx:Button label="" click="onEditButton()" width="28" id="editButton" height="28" visible="{!uploading}" x="180" y="130" alpha="{selected?1:0}" 
        	styleName="CommentBtn" buttonMode="true" mouseChildren="false" useHandCursor="true"/>
        	
        <mx:Canvas id="loading" verticalCenter="-8" horizontalCenter="0" width="86" height="86" visible="{uploading}" styleName="spinnerBkg" horizontalScrollPolicy="off" 
        	verticalScrollPolicy="off">
        	<mx:SWFLoader source="/com/vizzuality/assets/loading.swf" y="15" id="swfloader1" horizontalCenter="0"/>
			<mx:Label id="bar" text="{Application.application.uploadingStatus}" y="55" color="#f9f9f9" fontSize="13" height="23" horizontalCenter="0" fontWeight="bold" fontFamily="Arial"/>
        </mx:Canvas>
        
        <components1:DeleteConfirmation id="deleteConfirmation" verticalCenter="-15" kind="{(group)?'group':'image'}" 
        	visible="false" deleteImages="eraseImage()" cancelDelete="onCancelDelete()"  horizontalCenter="0"/>
        	
       	<components1:NotesComponent id="commentArea" verticalCenter="-15" visible="false" horizontalCenter="0" changeComment="onChangeComment(event)"/>	
        	
        
</mx:Canvas>