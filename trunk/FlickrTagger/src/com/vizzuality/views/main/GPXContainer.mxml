<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		   xmlns:components="com.vizzuality.views.main.components.*" xmlns:maps="com.google.maps.*" creationComplete="onCreationComplete()">
	
	<mx:states>
		<mx:State name="gpxAdded">
			<mx:RemoveChild target="{emptySectionGpx}"/>
			<mx:SetProperty target="{canvas1}" name="styleName" value="infoUpGreenBkg"/>
			<mx:RemoveChild target="{dropZone}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<mx:Image id="staticMap" width="100%" height="100%" source="{staticMapUrl}" />
			</mx:AddChild>
			<mx:SetProperty target="{label1}" name="text" value="This is the track you have loaded. XX photos had been geotagged."/>
			<mx:SetProperty target="{label2}" name="text" value="This is the track you have loaded. XX photos had been geotagged."/>
		</mx:State>
		<mx:State name="gpxError">
			<mx:SetProperty target="{canvas1}" name="styleName" value="infoUpRedBkg"/>
			<mx:SetProperty target="{label1}" name="text">
				<mx:value>There has been an error with the file, use another GPX file.</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{label2}" name="text">
				<mx:value>There has been an error with the file, use another GPX file.</mx:value>
			</mx:SetProperty>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import __AS3__.vec.Vector;
			
			import com.adobe.gpslib.GPX;
			import com.adobe.gpslib.GPXService;
			import com.adobe.gpslib.gpx.Track;
			import com.adobe.gpslib.gpx.Waypoint;
			import com.adobe.gpslib.gpx.events.ParseEvent;
			import com.adobe.utils.DateUtil;
			import com.google.maps.LatLng;
			import com.vizzuality.dao.DataAccessObject;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.Window;
			import mx.events.FileEvent;
			
			import net.duncanhall.gmaps.PolylineEncoder;
			
			
			private var gpxFile:File = File.documentsDirectory;
			private var gpx: GPX = new GPX(); 
			public var gpxPath:Array;
			[Bindable] private var staticMapUrl:String;
			private var dao: DataAccessObject= new DataAccessObject();
				
			
			private function onCreationComplete():void {
 				
				if(File.applicationStorageDirectory.resolvePath("track.gpx").exists) {
					loadGpxFile();
				} else {
					addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, onDropEnter);
					addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, onDrop);
				}
				
 				
 				
 				
/* 				var hackWindow:Window=new Window();
				var hackMap:Map = new Map();
				hackMap.url ="http://bioblitz.tdwg.org/flickrtagger";
				hackMap.key="ABQIAAAAtDJGVn6RztUmxjnX5hMzjRTlgNwHccSvWwZGaOrPR5JguxSloxRLQb8iPFvjar21x70RCFpHWU1zvQ";
				hackMap.sensor="false";
				hackWindow.addChild(hackMap);
				hackWindow.visible=false;
				hackWindow.open();
				hackWindow.close(); */
			}
			private function onMapReady():void {
				
			}
				
			private function selectGPXFile():void {
				var imgFilter:FileFilter = new FileFilter("GPX Files", "*.gpx");
				gpxFile.addEventListener(Event.SELECT, fileSelected);
				gpxFile.browseForOpen("Open", [imgFilter]);
			}
			
			private function fileSelected(event:Event):void {
				
				//Lets copy the file to our data dir
				gpxFile.copyTo(File.applicationStorageDirectory.resolvePath("track.gpx"));
			}
			
			private function loadGpxFile():void {				
				var stream:FileStream = new FileStream();
				stream.open(File.applicationStorageDirectory.resolvePath("track.gpx"),FileMode.READ);
				var fileData:String = stream.readUTFBytes(stream.bytesAvailable);
				stream.close();
				var xmlData:XML = new XML(fileData);
				
				var gpxSrv:GPXService = new GPXService();
				gpxSrv.addEventListener(ParseEvent.PARSE_COMPLETE,onGpxParse);
				gpxSrv.load(xmlData);				
			}
			
			protected function onGpxParse(event:ParseEvent):void {
				var len:int = event.gpx.arrWaypoints.length;
				//gpx_data.text = event.gpx.time.day + '/' + event.gpx.time.month + '/' + event.gpx.time.fullYear + ' --> ' + event.gpx.name;
				
				if (event.gpx.arrWaypoints.length>1) {
					gpxPath = event.gpx.arrWaypoints;
				} else {
					if(event.gpx.arrTracks.length>0) {
						gpxPath = (event.gpx.arrTracks[0] as Track).trackSegment;
					}
				}
				if(gpxPath.length<2) {
					currentState = 'gpxError';
				}
				geolocatePictures();
				
				var latlngs:Vector.<LatLng> = new Vector.<LatLng>;
				
				for each(var wayPoint:Waypoint in gpxPath) {
					latlngs.push(new LatLng(wayPoint.latitude,wayPoint.longitude));
				}
				var encoded:String = PolylineEncoder.fromPoints(latlngs);
				
				staticMapUrl="http://maps.google.com/maps/api/staticmap?maptype=roadmap&path=color:0xff0000ff|weight:5|enc:"+encoded+
					"&size=490x590&sensor=false";
				
								
				currentState="gpxAdded";
				
				
			}
			
			private function geolocatePictures():void {
				var pathLen:int = gpxPath.length;
				//get GPX timespan
				var minTime:Date = (gpxPath[0] as Waypoint).time;
				var maxTime:Date = (gpxPath[pathLen-1] as Waypoint).time;
				
				//Loop over pics
				var sqlStatement:SQLStatement = new SQLStatement();
				sqlStatement.text="SELECT * from photos where lat is null ";
					//"and timestamp >=:minTime and timestamp<= :maxTime";
				//sqlStatement.parameters[":minTime"]=minTime;
				//sqlStatement.parameters[":maxTime"]=maxTime;
				
				dao.openConnection("",sqlStatement);
				var pics:Array = dao.dbResult.source;
				for each(var pic:Object in pics) {
					var firstClosestWayPointIndex:uint=0;
					var counter:uint=0;
					var minimumDistance:Number=999999999999999999;
					for each(var wp:Waypoint in gpxPath) {
						var distance:Number= Math.abs((pic.timestamp as Date).time - wp.time.time);
						if(distance < minimumDistance) {
							minimumDistance=distance;
						} else {
							break;
						}
						counter++;	
					}		
					counter=(counter==0)?0:counter-1;
					var closestWp:Waypoint = gpxPath[counter];
					dao.openConnection("UPDATE photos set lat="+closestWp.latitude+", lon="+closestWp.longitude+" WHERE path='"+pic.path+"'");
					pic.lat = closestWp.latitude;
					pic.lon = closestWp.longitude;
					pic.altitude = closestWp.elevation;					
				}
			}
			
			
			

			private function onDropEnter(event:NativeDragEvent):void {
	 			NativeDragManager.acceptDragDrop(dropZone);
	   		}
	   		
			private function onDrop(event:NativeDragEvent):void {
				NativeDragManager.dropAction = NativeDragActions.COPY;
			    var droppedFiles:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
			    for each (var file:File in droppedFiles) {
			    	if (file.extension == 'gpx') {
			    		gpxFile = file;
			    		fileSelected(new Event(Event.SELECT));
			    		return;
			    	}				       
			    }
			    
			    currentState = 'gpxError';
			}
			
			
			
		]]>
	</mx:Script>

	<mx:DropShadowFilter id="headerShadow" alpha="0.3" color="#000000" angle="90" blurY="10" distance="8"/>
	<mx:VBox width="100%" height="100%" verticalGap="0" id="vbox1">
		<mx:Canvas height="37" width="100%" styleName="infoUpOrangeBkg" filters="{[headerShadow]}" backgroundSize="100%" id="canvas1">
	    	<mx:Label text="Drag or select by browsing a GPX of your journey" x="14" verticalCenter="1" styleName="txtInfoUpShadow" alpha="0.3"  id="label2"/>
	    	<mx:Label text="Drag or select by browsing a GPX of your journey" x="13" verticalCenter="0" styleName="txtInfoUp"  id="label1"/>
	    </mx:Canvas>
	    <mx:List height="100%" width="100%" id="dropZone" allowDragSelection="true" backgroundAlpha="0" borderThickness="0"/>			
	</mx:VBox>
	<components:EmptySectionGpx  horizontalCenter="0" verticalCenter="0" width="345" height="180" visible="true" id="emptySectionGpx" clickSelect="selectGPXFile()" />
	
</mx:Canvas>




<!--<mx:HBox width="100%">
	<mx:Button label="Add GPX file" left="0" click="selectGPXFile(gpxFile)" styleName="JamCreation"/>
	<mx:Label id="gpx_data" text="GPX File data" right="0" width="298" height="26" color="#FFFFFF" fontSize="12" fontFamily="Verdana" fontWeight="bold" textAlign="left" paddingTop="3"/>	
</mx:HBox>-->
