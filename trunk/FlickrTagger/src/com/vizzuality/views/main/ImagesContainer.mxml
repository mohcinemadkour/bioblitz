<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:comp="com.vizzuality.components.*" creationComplete="onCreationComplete()" 
	xmlns:components="com.vizzuality.views.main.components.*" xmlns:display="flash.display.*" xmlns:filters="flash.filters.*" 
	xmlns:components1="com.vizzuality.views.authentication.components.*">
	<mx:states>
		<mx:State name="imagesAdded">
			<mx:RemoveChild target="{emptySelectionPhoto}"/>
			<mx:SetProperty target="{Application.application.principalView.arrow}" name="source" value="{Application.application.Orange_Arrow}"/>
			<mx:SetProperty target="{label1}" name="text">
				<mx:value>Drag or select multiple photos (shift+click) to create groups</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{label2}" name="text">
				<mx:value>Drag or select multiple photos (shift+click) to create groups</mx:value>
			</mx:SetProperty>
			<mx:AddChild relativeTo="{headerHBox}" position="lastChild">
				<mx:Canvas height="37">
					<components1:CanvasBtn width="81" height="22" click="selectImageFile(fileToOpen)"
					btnText="ADD PHOTO" verticalCenter="0" horizontalCenter="0"
					styleBtnOver="addPhotoBtnOver"
					styleBtnUp="addPhotoBtnUp"
					styleLabel="addPhotoBtnLabel"
					styleLabelShadow="addPhotoBtnLabelShadow"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		<mx:State name="multipleSelection">
			<mx:SetProperty target="{canvas1}" name="styleName" value="infoUpYellowBkg"/>
			<mx:RemoveChild target="{emptySelectionPhoto}"/>
			<mx:AddChild relativeTo="{headerHBox}" position="lastChild">
				<components1:CanvasBtn width="55" height="22" click="createGroup()"
					btnText="GROUP"
					styleBtnOver="makeGroupBtnOver"
					styleBtnUp="makeGroupBtnUp"
					styleLabel="makeGroupBtnLabel"
					styleLabelShadow="makeGroupBtnLabelShadow"/>
			</mx:AddChild>
			<mx:SetProperty target="{label1}" name="text" value="You have selected "/>
			<mx:SetProperty target="{label2}" name="text" value="You have selected "/>
			<mx:SetStyle target="{headerHBox}" name="horizontalGap" value="4"/>
		</mx:State>
		<mx:State name="banSelection">
			<mx:RemoveChild target="{emptySelectionPhoto}"/>
			<mx:SetProperty target="{canvas1}" name="styleName" value="infoUpRedBkg"/>
			<mx:SetProperty target="{label1}" name="text" value="You can't join two groups"/>
			<mx:SetProperty target="{label2}" name="text" value="You can't join two groups"/>
		</mx:State>
		<mx:State name="processingImages">
			<mx:AddChild position="lastChild">
				<mx:Canvas top="36" left="0" right="0" bottom="0" backgroundColor="#000000" backgroundAlpha="0.55" visible="true">
				</mx:Canvas>
			</mx:AddChild>
			<mx:SetProperty target="{label1}" name="text" value="Processing images..."/>
			<mx:SetProperty target="{label2}" name="text" value="Processing images..."/>
			<mx:RemoveChild target="{emptySelectionPhoto}"/>
			<mx:AddChild relativeTo="{headerHBox}" position="lastChild">
				<mx:Canvas width="380" height="37" >
					<mx:ProgressBar color="black" label="" id="pBar" labelPlacement="left" verticalCenter="0" indeterminate="true" width="300" height="15" 
					trackHeight="12" barColor="black" direction="right"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:SetStyle target="{vbox1}" name="left" value="0"/>
			<mx:SetProperty target="{vbox1}" name="width"/>
			<mx:SetStyle target="{vbox1}" name="right" value="0"/>
			<mx:SetStyle target="{vbox1}" name="top" value="0"/>
			<mx:SetProperty target="{vbox1}" name="height"/>
			<mx:SetStyle target="{vbox1}" name="bottom" value="0"/>
			<mx:SetProperty target="{headerHBox}" name="width"/>
			<mx:SetStyle target="{headerHBox}" name="left" value="0"/>
			<mx:SetStyle target="{headerHBox}" name="right" value="0"/>
		</mx:State>
		<mx:State name="showGroup">
			<mx:SetProperty target="{label1}" name="text" value="You are browsing this group"/>
			<mx:SetProperty target="{label2}" name="text" value="You are browsing this group"/>
			<mx:RemoveChild target="{emptySelectionPhoto}"/>
			<mx:SetProperty target="{vbox1}" name="y" value="0"/>
			<mx:SetProperty target="{vbox1}" name="x" value="0"/>
			<mx:AddChild relativeTo="{headerHBox}" position="firstChild">
				<components1:CanvasBtn width="55" height="22" click="backStart()"
					btnText="BACK"
					styleBtnOver="goBackBtnOver"
					styleBtnUp="goBackBtnUp"
					styleLabel="goBackBtnLabel"
					styleLabelShadow="goBackBtnLabelShadow"/>
			</mx:AddChild>
			<mx:RemoveChild target="{tilelist}"/>
			<mx:RemoveChild target="{spacer1}"/>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<mx:Canvas  id="canvas_group" height="37" width="100%" styleName="infoUpOrangeBkg" backgroundSize="100%" 
					 verticalScrollPolicy="off" horizontalScrollPolicy="off">
	    			<mx:Label text="There are 16 photos in this group" x="11" verticalCenter="1" styleName="txtInfoUpShadow" alpha="0.3" left="14" id="total_photos1"/>
	    			<mx:Label text="There are 16 photos in this group" x="10" verticalCenter="0" styleName="txtInfoUp" left="13" id="total_photos2"/>
				</mx:Canvas>
			</mx:AddChild>
			<mx:AddChild relativeTo="{vbox1}" position="lastChild">
				<comp:TileListFlickTagger width="100%" height="100%" backgroundAlpha="0" selectionColor="#4a4a4a" selectionDisabledColor="#4a4a4a" rollOverColor="#4a4a4a" id="grouplist"  
					dataProvider="{groupArray}" itemRenderer="com.vizzuality.views.main.components.GroupRenderer" minWidth="440" borderThickness="0"  
					dragEnabled="false" dragMoveEnabled="false" styleName="imagesContent"/>
			</mx:AddChild>
			<mx:SetProperty target="{canvas1}" name="styleName" value="infoUpGreyBkg"/>
			<mx:SetStyle target="{headerHBox}" name="paddingLeft" value="9"/>
		</mx:State>
	</mx:states>

	
		
	<mx:Script>
		<![CDATA[
			import mx.events.StateChangeEvent;
			import mx.controls.TextInput;
			import com.vizzuality.event.SelectedSpecieEvent;
			import com.vizzuality.views.main.components.ImageRenderer;
			import com.vizzuality.event.GetTaxonEvent;
			import __AS3__.vec.Vector;
			
			import com.adobe.crypto.MD5;
			import com.adobe.images.JPGEncoder;
			import com.adobe.serialization.json.JSON;
			import com.adobe.utils.DateUtil;
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.events.*;
			import com.adobe.webapis.flickr.methodgroups.Upload;
			import com.vizzuality.*;
			import com.vizzuality.dao.DataAccessObject;
			import com.vizzuality.dao.FlickrUploadService;
			import com.vizzuality.dao.TaxonomyResolutionService;
			import com.vizzuality.views.authentication.FlickrAuthorizationSettings;
			
			import flash.data.*;
			import flash.desktop.*;
			import flash.filesystem.*;
			import flash.net.FileFilter;
			
			import jp.shichiseki.exif.ExifInfo;
			import jp.shichiseki.exif.ExifLoader;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TabNavigator;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.TileList;
			import mx.core.Application;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.states.AddChild;
			
			
			//progress uploading bar
			public var progressPop:IFlexDisplayObject;	
			private var dao: DataAccessObject= new DataAccessObject();
			[Bindable] public var sqlArray: ArrayCollection;
			[Bindable] public var groupArray: ArrayCollection;
			private var dir:File = File.applicationStorageDirectory.resolvePath("images");
			private var imagesDir:String;
			private var fileToOpen:File = File.documentsDirectory;
			private var alias: String;
			private var identification: String;
			private var path: String;
			private var scientific: String;
			
			
			
			private function onCreationComplete():void {
		    	addEventListener(GetTaxonEvent.RESULT,onTaxonResult);
		    	addEventListener("onFocusInputOut",function(ev:Event):void{searchAsYouType.visible = false;});
		    	addEventListener(Event.RESIZE,function(ev:Event):void{searchAsYouType.visible = false;});
		    	tilelist.addEventListener(Event.SCROLL,function(ev:Event):void{searchAsYouType.visible = false;});
		    	
		    	refreshTilelist();
   			  	imagesDir = dir.nativePath;
				addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, onDropEnter);
				addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, onDrop);
		 	}
		 	
			
			
		 	public function refreshTilelist():void {
		 		sqlArray = new ArrayCollection();
		 		//Get first images not grouped
		 		dao.openConnection("SELECT scientific,path,id,lat,lon,comment,timestamp, (select count(id) from photos where group_id=g.id) AS group_total FROM groups as g");
				sqlArray = dao.dbResult;

		 		//Get second images not grouped
				dao.openConnection("SELECT scientific,path,id,lat,lon,comment,timestamp FROM photos WHERE group_id is NULL");
				sqlArray = new ArrayCollection(sqlArray.source.concat(dao.dbResult.source));
				chooseState();
		 	}
			
			
			private function backStart():void {
				refreshTilelist();
				chooseState();
			}
			
			
			public function showGroupPhotos(group_id:String):void {
		 		groupArray = new ArrayCollection();
		 		dao.openConnection("SELECT scientific,path,group_id from photos where group_id="+group_id);
				groupArray = dao.dbResult;
				dao.openConnection("SELECT scientific from groups where id="+group_id);
				currentState = "showGroup";
		 		Application.application.principalView.arrow.source = Application.application.Grey_Arrow;				
				var result:String = dao.dbResult[0].scientific;
				if (result!="undefined" && result!="Not identified") {
					label1.text = 'You are browsing a group of “'+result+'”';
					label2.text = 'You are browsing a group of “'+result+'”';;
				} else {
					label1.text = 'You are browsing this group';
					label2.text = 'You are browsing this group';;
				}
				dao.openConnection("select count(id) AS total from photos where group_id="+group_id);
				var count:int = dao.dbResult[0].total;
				total_photos1.text = "There are "+count+" photos in this group";
				total_photos2.text = "There are "+count+" photos in this group";

			}	
			
			
			public function updateGroupReferences(group_id:int, path:String):void {
                // Change group main image
				// Change text of the labels!
				
                dao.openConnection("UPDATE photos SET group_id=NULL WHERE path='"+path+"'");
                dao.openConnection("select count(id) AS total from photos where group_id="+group_id);
				var count:int = dao.dbResult[0].total;
				if (count<2) {
                	dao.openConnection("DELETE FROM groups WHERE id='"+ group_id +"'");
				} else {
					dao.openConnection("select path from photos where group_id="+group_id);
					var newPath:String = dao.dbResult[0].path;
					dao.openConnection("UPDATE groups SET path='"+getImageUrlInsideApp(newPath)+"' WHERE id="+group_id);
				}
				
				total_photos1.text = "There are "+count+" photos in this group";
				total_photos2.text = "There are "+count+" photos in this group";
                        
				for (var i:int=0;i<groupArray.length;i++) {
 					if (path==groupArray[i].path)
 						break;
	 			}

	 			grouplist.indexToItemRenderer(i).data=null;
	 			groupArray.removeItemAt(i);
			}
			
		 	
		 	
		 	private function onTaxonResult(ev:GetTaxonEvent):void {
		 		searchAsYouType.taxon = ev.taxon;
		 		
		 		//(ev.target as ImageRenderer).
		 		//Positioning Search as you type
		 		if (ev.coords.x<208) {
		 			searchAsYouType.currentState = "ToLeft";
		 			searchAsYouType.setStyle('top',ev.coords.y-308);
		 			searchAsYouType.setStyle('left',ev.coords.x+130);
		 		} else {
		 			searchAsYouType.currentState = "";
		 			searchAsYouType.setStyle('top',ev.coords.y-308);
		 			searchAsYouType.setStyle('left',ev.coords.x-220);
		 		}
		 		
		 	}
		 	
		 	

		 			 
		 	/* Delete operations */	 	
		 	
		 	public function deleteImage(path:String,num:int):void {
	 			var file:File = new File;
	 			if (num==0) {
		 			dao.openConnection("DELETE FROM photos WHERE path='"+ "file://" + escape(path) +"'");
		 			file.url= getImageUrlInsideApp(path);
	 			} else {
	 				dao.openConnection("DELETE FROM photos WHERE path='"+ path +"'");
		 			file.url= getImageUrlInsideApp(path);
	 			}
	 			file.deleteFile();
	 			
	 			for (var i:int=0;i<sqlArray.length;i++) {
 					if (file.url==getImageUrlInsideApp(sqlArray[i].path))
 						break;
	 			}

	 			tilelist.indexToItemRenderer(i).data=null;
	 			sqlArray.removeItemAt(i);
	 			chooseState();
		 	}
		 	
		 	
		 	public function deleteGroupImages(group_id:String):void {
		 		dao.openConnection("SELECT path FROM photos WHERE group_id = '"+group_id+"'");
		 		var result:ArrayCollection = dao.dbResult;
		 		for (var i:int=0; i<result.length; i++) {
		 			var file:File = new File;
		 			file.url= getImageUrlInsideApp(result[i].path);
		 			file.deleteFile();
		 		}
		 		dao.openConnection("DELETE FROM photos WHERE group_id = '"+group_id+"'");
		 		deleteGroup(group_id);
		 	}
		 	
		 	
		 	public function deleteGroup(group_id:String):void {
	 			for (var i:int=0;i<sqlArray.length;i++) {
 					if (group_id==sqlArray[i].id && sqlArray[i].group_total!=undefined)
 						break;
 					
	 			}
	 			dao.openConnection("DELETE FROM groups WHERE id='"+ group_id +"'");
	 			tilelist.indexToItemRenderer(i).data=null;
	 			sqlArray.removeItemAt(i);
	 			chooseState();
		 	}
		 	
		 	
		 	public function deleteImagefromGroup(path:String,num:int):void {
		 		var file:File = new File;
	 			if (num==0) {
		 			dao.openConnection("DELETE FROM photos WHERE path='"+ "file://" + escape(path) +"'");
		 			file.url= "file://" + path;
	 			} else {
	 				dao.openConnection("DELETE FROM photos WHERE path='"+ path +"'");
		 			file.url= path;
	 			}
	 			file.deleteFile();
		 	}
		 	
		 	
		 	private function removeImageTilelist(image_id:int):void {
		 		for (var i:int=0; i<sqlArray.length; i++) {
		 			if (sqlArray[i].id == image_id && sqlArray[i].group_total==undefined ) {
		 				tilelist.indexToItemRenderer(i).data=null;
	 					sqlArray.removeItemAt(i);
	 					break;
		 			}
		 		}
		 	}

		 	
		 	
		 	public function updateName(scientificName:String,path:String,group_id:int = -1):void {
			 	if (group_id == -1) {
			 		dao.openConnection("UPDATE photos SET scientific='"+scientificName+"' WHERE path='"+path+"'");
			 	} else {
			 		dao.openConnection("UPDATE groups SET scientific='"+scientificName+"' WHERE id='"+group_id+"'");
			 		dao.openConnection("UPDATE photos SET scientific='"+scientificName+"' WHERE group_id='"+group_id+"'");
			 	}
		 	}
		 	
		 	
		 	
		 	
		 	public function updateComment(comment:String, path:String, group_id:int = -1):void {
		 		if (group_id == -1) {
			 		dao.openConnection("UPDATE photos SET comment='"+comment+"' WHERE path='"+path+"'");
			 	} else {
			 		dao.openConnection("UPDATE groups SET scientific='"+comment+"' WHERE id='"+group_id+"'");
			 		dao.openConnection("UPDATE photos SET scientific='"+comment+"' WHERE group_id='"+group_id+"'");
			 	}
		 	}


			
			
			
			/* Check and choose state functions */
			 
		 	public function chooseState():void {
		 		if (sqlArray.length!=0) {
		 			Application.application.principalView.arrow.source = Application.application.Orange_Arrow;
					currentState = "imagesAdded";
				} else {
		 			Application.application.principalView.arrow.source = Application.application.Orange_Arrow;
					currentState = "";
				}
		 	}			
			
			
			private function checkMultipleSelection(event:ListEvent):void {
				if (tilelist.selectedItems.length>1) {
					var result:Object = checkNoMoreTwoGroupsSelected();
					if (!result.valid) {
		 				Application.application.principalView.arrow.source = Application.application.Red_Arrow;
						currentState = "banSelection";
					} else {
		 				Application.application.principalView.arrow.source = Application.application.Yellow_Arrow;
						currentState = "multipleSelection";
						label1.text = "You have selected " + result.count;
						label2.text = "You have selected " + result.count;						
					}
				} else {
					chooseState();
				}
			}
			
			
			
			private function checkNoMoreTwoGroupsSelected():Object {
				var result:Object = new Object();
				result.count = 0;
				result.valid = true;
				var numGroups:int = 0;
				for (var i:int = 0; i<tilelist.selectedItems.length; i++) {
					if (tilelist.selectedItems[i].group_total!=undefined) {
						if (numGroups<1) {
							result.count = result.count + tilelist.selectedItems[i].group_total;
							numGroups++;
						} else {
							result.valid = false;
							return result;
						}						
					} else {
						result.count++;
					}
				}
				return result;
			}
			
			
			
			/* Create group */
			
			private function createGroup():void {
				//Create group in our Database
				var group_data:Object = new Object();
				var photos_ids_str:String = '';
				var imagesIdsArray: Array = new Array();
				
				if (existGroupOnSelectedItems().group) {
					//If there is a group in the selected items
					var isThereGroup: Object = existGroupOnSelectedItems();
					isThereGroup.selected_count = tilelist.selectedItems.length - 1;
					for (var j:int=0; j<tilelist.selectedItems.length; j++) {
						if (tilelist.selectedItems[j].group_total==undefined) {
							photos_ids_str += tilelist.selectedItems[j].id + ',';
							imagesIdsArray.push(tilelist.selectedItems[j].id);
						} else {
							tilelist.selectedItems[j].group_total = tilelist.selectedItems[j].group_total + isThereGroup.selected_count;
						}
					}
					
					for (var k:int=0; k<imagesIdsArray.length; k++) {					
	 					removeImageTilelist(imagesIdsArray[k]);
					}
					
					photos_ids_str = photos_ids_str.substr(0,photos_ids_str.length-1);
		     		dao.openConnection("UPDATE photos SET group_id="+isThereGroup.group_id+" where id in ("+photos_ids_str+")");				
				} else {
					//If there isn't a group in the selected items
					group_data.count = tilelist.selectedItems.length;
					for (var i:int=0; i<tilelist.selectedItems.length; i++) {
						//Scientific name
						if (group_data.scientific==undefined && tilelist.selectedItems[i].scientific != null && tilelist.selectedItems[i].scientific != "Not identified") {
							group_data.scientific = tilelist.selectedItems[i].scientific;
						}
						//Path
						if (group_data.path==undefined) {
							group_data.path = tilelist.selectedItems[i].path;
						}
						//Timestamp
						if (group_data.timestamp==undefined && tilelist.selectedItems[i].timestamp!=null) {
							group_data.timestamp = tilelist.selectedItems[i].timestamp;
						}
						
						if (group_data.comment==undefined && tilelist.selectedItems[i].comment!=null) {
							group_data.comment = tilelist.selectedItems[i].comment;
						}
						
						if (group_data.lat==undefined && tilelist.selectedItems[i].lat != null) {
							group_data.lat = tilelist.selectedItems[i].lat;
							group_data.lon = tilelist.selectedItems[i].lon;
						}						
						photos_ids_str += tilelist.selectedItems[i].id + ',';
						imagesIdsArray.push(tilelist.selectedItems[i].id);
						
					}
					
					dao.openConnection("INSERT INTO groups (scientific,path,lat,lon) VALUES ('"+group_data.scienfitic+"','"+group_data.path+"','"+group_data.lat+"','"+group_data.lon+"')");
					dao.openConnection("SELECT id FROM groups order by id DESC LIMIT 1");
					var group_identification:String = dao.dbResult[0].id;
					
					//Change data of the first element for converting it into a group
					var find:Boolean = false;
					for (var u:int = 0; u<tilelist.renderers.length; u++) {
						if (find) break;
						for (var o:int = 0; o<tilelist.renderers[u].length; o++) {
							if (tilelist.renderers[u][o].data.path == tilelist.selectedItems[0].path) {
								tilelist.renderers[u][o].data.group_total = group_data.count;
			  					tilelist.renderers[u][o].data.scientific = group_data.scientific;
			  					tilelist.renderers[u][o].data.lat = (group_data.lat==undefined)?null:group_data.lat;
			  					tilelist.renderers[u][o].data.lon = (group_data.lon==undefined)?null:group_data.lon;
			  					tilelist.renderers[u][o].data.timestamp = (group_data.timestamp==undefined)?null:group_data.timestamp;
			  					tilelist.renderers[u][o].data.comment = (group_data.comment==undefined)?null:group_data.comment;
			  					tilelist.renderers[u][o].data.id = group_identification;
								find = true;
								break;
							}	
						}
					}
					
					//Delete rest of the photos
					for (var z:int=1; z<imagesIdsArray.length; z++) {					
						removeImageTilelist(imagesIdsArray[z]);
					}				
					
					photos_ids_str = photos_ids_str.substr(0,photos_ids_str.length-1);
		     		dao.openConnection("UPDATE photos SET group_id="+group_identification+" where id in ("+photos_ids_str+")");					
				}
				tilelist.selectedIndices = new Array();
				chooseState();
			}
			
			
			
			private function existGroupOnSelectedItems():Object {
				var result:Object = new Object();
				result.group = false;
				result.group_id = 0;
				for (var i:int=0; i<tilelist.selectedItems.length; i++) {
					if (tilelist.selectedItems[i].group_total!=undefined) {
						result.group_id = tilelist.selectedItems[i].id;
						result.group = true;
						return result;
					}
				}
				return result;
			}
			
			
			
			
			
			/* ------- Image Selection ------- */
			
			private function selectImageFile(root:File):void {
				var imgFilter:FileFilter = new FileFilter("Images", "*.jpg;*.jpeg;*.gif;*.png,*.JPG;*.JPEG;*.GIF;*.PNG");
				root.browseForOpenMultiple("Open", [imgFilter]);
			  	root.addEventListener(FileListEvent.SELECT_MULTIPLE, fileSelected);
			}
			
			private function fileSelected(event:FileListEvent):void {
				currentState = "processingImages";
				var files:Array = event.files as Array;
				getImageFilesRecursively(files);
				var numItems:int = imagePaths.length;  
				processingTimer.addEventListener(TimerEvent.TIMER,loadImage);
				processingTimer.start();
				tilelist.selectedIndices = new Array();
			}
			
			
			
			
			/* ------- Drop functionality ------- */
			
			private function onDropEnter(event:NativeDragEvent):void {
	 			NativeDragManager.acceptDragDrop(tilelist);
	   		}
	   		
	   		private var imagePaths:Vector.<String> = new Vector.<String>();
			private var acceptedExtensions:Array = ["jpg","jpeg","gif","png","JPG","JPEG","GIF","PNG"];
			private var processingTimer:Timer = new Timer(500);
	   		
			private function onDrop(event:NativeDragEvent):void {
				currentState = "processingImages";
				NativeDragManager.dropAction = NativeDragActions.COPY;
			    var droppedFiles:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;	    
			    getImageFilesRecursively(droppedFiles);		  
			    var numItems:int = imagePaths.length;  
				processingTimer.addEventListener(TimerEvent.TIMER,loadImage);
				processingTimer.start();				
				tilelist.selectedIndices = new Array();
			}
			
			private function getImageUrlInsideApp(externalPath:String):String {
				var fileName:String = externalPath.replace("file://","").replace(/\//g,'_');
	          	fileName.replace("gif","jpg").replace("png","jpg").replace("GIF","jpg").replace("PNG","jpg").replace("JPEG","jpg").replace("jpeg","jpg").replace("JPG","jpg");
				return File.applicationStorageDirectory.resolvePath(imagesDir + "/"+fileName).url;
			}
			
			private function getImageFilesRecursively(files:Array):void {
				for each (var file:File in files) {
			    	if (file.isDirectory) {		
			    		getImageFilesRecursively(file.getDirectoryListing());
			    	} else {
			    		if(acceptedExtensions.indexOf(file.extension)>=0 && !checkIfExistPhoto(file.url)) {
			    			imagePaths.push(file.url);
			    		} else {
			    			chooseState();
			    		}
			    	}			       
			    }
			}
			
			private var processingPath:String;
			private var processingLoader:ExifLoader = new ExifLoader();
			private var isProcessingImage:Boolean=false;
			private function loadImage(event:TimerEvent):void {			
				if(isProcessingImage) return;
				
				isProcessingImage=true;
				
				if(imagePaths.length>0) {
					processingPath=imagePaths[0];
				}else {
					isProcessingImage=false;
					processingTimer.stop();
					processingTimer.removeEventListener(TimerEvent.TIMER,loadImage);
					chooseState();
					return;
				}
				
				processingLoader.contentLoaderInfo.addEventListener(Event.COMPLETE,processImage);
				processingLoader.load(new URLRequest(processingPath));				
				
				
				//we finish removing the used path
				imagePaths.shift();
			}
			
			private function processImage(event:Event):void {
				
				var dateTimeDigitized:Date;
				try {
					dateTimeDigitized = new Date(((event.target.loader.exif as ExifInfo).ifds.exif.DateTimeDigitized as String).replace(":","/").replace(":","/"));
					
				} catch(e:Error) {
					dateTimeDigitized=null;
				}
				
				var bitmap:Bitmap = Bitmap(event.target.content);
				var bitmapData:BitmapData = bitmap.bitmapData;
				var originalWidth:Number = bitmapData.width;
			 	var originalHeight:Number = bitmapData.height;
			 	var newWidth:Number = 500;
			 	var newHeight:Number = 350;
			 			
			 	var m:Matrix = new Matrix();
			 
		  		var sx:Number =  newWidth / originalWidth;
		  		var sy:Number = newHeight / originalHeight;
		  		var scale:Number = Math.min(sx, sy);
		  		newWidth = originalWidth * scale;
		  		newHeight = originalHeight * scale;	
			 	m.scale(scale, scale);
			 	var bmd2:BitmapData = new BitmapData( newWidth,newHeight); 
			 	bmd2.draw(bitmapData, m);
				var startPoint:Point = new Point(((newWidth/2)-85), ((newHeight/2)-63));
				var newBitmapData:BitmapData = new BitmapData(170,126);
				newBitmapData.copyPixels(bmd2, 
					new Rectangle(startPoint.x,startPoint.y,170,126), 
	                new Point(0,0));
	            
	            //save the image
	            var jpg:JPGEncoder = new JPGEncoder(70);
	            var ba:ByteArray = jpg.encode(newBitmapData);
	            var stream:FileStream = new FileStream();
	            var newFile:File = new File();
	            newFile.url = getImageUrlInsideApp(event.target.loader.url as String);
	            stream.open(newFile, FileMode.WRITE);
	            stream.writeBytes(ba);
	            stream.close();
	            
				var sqlStament:SQLStatement = new SQLStatement();
				sqlStament.text ="INSERT INTO photos (path,timestamp) VALUES(:path,:timestamp)";
				sqlStament.parameters[":path"]=event.target.loader.url;
				sqlStament.parameters[":timestamp"]=dateTimeDigitized;
				dao.openConnection("",sqlStament);
			  	dao.openConnection("SELECT id FROM photos WHERE path='"+event.target.loader.url+"'");
			  	var identification:Object = dao.dbResult[0];

	            //Creation of new item
			  	var obj: Object = new Object();
			  	obj.path = event.target.loader.url;
			  	obj.scientific = null;
			  	obj.lat = null;
			  	obj.lon = null;
			  	obj.id = identification.id;
			  	obj.timestamp = dateTimeDigitized;
			  	obj.comment = null;
			  	sqlArray.addItem(obj);	
	            
	            isProcessingImage=false;		
			}
			
			
			private function checkIfExistPhoto(path:String):Boolean {
				for (var i:int=0;i<sqlArray.length; i++) {
					if (sqlArray[i].path == path) {
						return true;
					}
				}
				return false;
			}
			
			
			private function onSelectedSpecie(ev:SelectedSpecieEvent):void {
				for (var i:int = 0; i<tilelist.renderers.length; i++) {
					for (var j:int = 0; j<tilelist.renderers[i].length; j++) {
						if (tilelist.renderers[i][j].data.editing!=undefined && tilelist.renderers[i][j].data.editing) {
							tilelist.renderers[i][j].data.editing = false;
							(tilelist.renderers[i][j].scientificNameInput as TextInput).focusEnabled = false;
							tilelist.renderers[i][j].scientificNameInput.text = ev.taxon;
							var group_id:int = (tilelist.renderers[i][j].data.group_total!=undefined && tilelist.renderers[i][j].data.group_total!=null)?tilelist.renderers[i][j].data.group_tot:-1;
							updateName(ev.taxon,tilelist.renderers[i][j].data.path,tilelist.renderers[i][j].data.id);
							return;
						}	
					}
				}
			}
			

		]]>
	</mx:Script>
	
	<mx:DropShadowFilter id="headerShadow" alpha="0.3" color="#000000" angle="90" blurY="10" distance="8"/>
	<mx:Canvas width="100%" height="100%" top="37"/>
	<mx:VBox width="100%" height="100%" verticalGap="0" horizontalAlign="center" id="vbox1">
		<mx:Canvas height="37" width="100%" styleName="infoUpOrangeBkg" filters="{[headerShadow]}" backgroundSize="100%" id="canvas1" verticalScrollPolicy="off" horizontalScrollPolicy="off">
			<mx:HBox verticalCenter="0" id="headerHBox" width="100%" horizontalGap="3" verticalAlign="middle">
				<mx:Canvas  id="canvas2" height="37">
	    			<mx:Label text="Add some photos to FlickrTagger" x="11" verticalCenter="1" styleName="txtInfoUpShadow" alpha="0.3" id="label2" left="14"/>
	    			<mx:Label text="Add some photos to FlickrTagger" x="10" verticalCenter="0" styleName="txtInfoUp" id="label1" left="13"/>
				</mx:Canvas>
			</mx:HBox>
	    </mx:Canvas>
	    <mx:Spacer height="10" id="spacer1"/>
		<comp:TileListFlickTagger backgroundAlpha="0" selectionColor="#4a4a4a" selectionDisabledColor="#4a4a4a" rollOverColor="#4a4a4a" id="tilelist"  dataProvider="{sqlArray}"
				itemRenderer="com.vizzuality.views.main.components.ImageRenderer" minWidth="440" width="100%" height="100%" borderThickness="0" 
				itemClick="checkMultipleSelection(event)" allowMultipleSelection="true" dragEnabled="true" dragMoveEnabled="true" styleName="imagesContent"/>					
	</mx:VBox>
	<components:EmptySectionPhoto  horizontalCenter="0" verticalCenter="0" width="315" height="180" visible="true" id="emptySelectionPhoto" addImage="selectImageFile(fileToOpen)"/>
	<components:SuggestedPhotoNamesTooltip visible="false" id="searchAsYouType" top="0" left="0" selectedSpecie="onSelectedSpecie(event)"/>
	
	
</mx:Canvas>