<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:comp="com.vizzuality.components.*" creationComplete="onCreationComplete()" 
	xmlns:components="com.vizzuality.views.main.components.*" xmlns:display="flash.display.*" xmlns:filters="flash.filters.*">
	<mx:states>
		<mx:State name="imagesAdded">
			<mx:RemoveChild target="{emptySelectionPhoto}"/>
			<mx:SetProperty target="{label1}" name="text">
				<mx:value>Drag or select multiple photos (shift+click) to create groups</mx:value>
			</mx:SetProperty>
			<mx:SetProperty target="{label2}" name="text">
				<mx:value>Drag or select multiple photos (shift+click) to create groups</mx:value>
			</mx:SetProperty>
			<mx:AddChild relativeTo="{headerHBox}" position="lastChild">
				<mx:Button label="ADD PHOTO" click="selectImageFile(fileToOpen)"/>
			</mx:AddChild>
		</mx:State>
		<mx:State name="multipleSelection">
			<mx:SetProperty target="{canvas1}" name="styleName" value="infoUpYellowBkg"/>
			<mx:RemoveChild target="{emptySelectionPhoto}"/>
			<mx:AddChild relativeTo="{headerHBox}" position="lastChild">
				<mx:Button x="315" y="10" label="GROUP" useHandCursor="true" buttonMode="true" mouseChildren="false" click="createGroup()"/>
			</mx:AddChild>
			<mx:SetProperty target="{label1}" name="text" value="You have selected "/>
			<mx:SetProperty target="{label2}" name="text" value="You have selected "/>
			<mx:SetStyle target="{headerHBox}" name="horizontalGap" value="4"/>
		</mx:State>
		<mx:State name="banSelection">
			<mx:RemoveChild target="{emptySelectionPhoto}"/>
			<mx:SetProperty target="{canvas1}" name="styleName" value="infoUpRedBkg"/>
			<mx:SetProperty target="{label1}" name="text" value="You can't join two groups"/>
			<mx:SetProperty target="{label2}" name="text" value="You can't join two groups"/>
		</mx:State>
	</mx:states>

	
		
	<mx:Script>
		<![CDATA[
			import mx.events.DragEvent;
			import com.vizzuality.views.authentication.FlickrAuthorizationSettings;
			import mx.containers.TabNavigator;
			import com.vizzuality.dao.FlickrUploadService;
			import mx.states.AddChild;
			import mx.events.CloseEvent;
			import com.vizzuality.dao.TaxonomyResolutionService;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
            import com.adobe.crypto.MD5;
			import mx.events.ListEvent;
			import mx.controls.Image;
			import mx.controls.TileList;
			import mx.collections.ArrayCollection;
			import com.vizzuality.dao.DataAccessObject;
			import flash.filesystem.*;
			import flash.net.FileFilter;
			import flash.desktop.*;
			import flash.data.*;
		   	import mx.controls.Alert;
		   	import com.vizzuality.*;
		    import mx.core.Application;
		    import com.adobe.webapis.flickr.events.*;
			import com.adobe.webapis.flickr.FlickrService;
			import com.adobe.webapis.flickr.methodgroups.Upload;
			import mx.managers.PopUpManager;
            import mx.core.IFlexDisplayObject;
			import com.adobe.serialization.json.JSON;
			
			
			//progress uploading bar
			public var progressPop:IFlexDisplayObject;	
			private var dao: DataAccessObject= new DataAccessObject();
			[Bindable] public var sqlArray: ArrayCollection;
			private var dir:File = File.applicationStorageDirectory.resolvePath("images");
			private var imagesDir:String;
			private var fileToOpen:File = File.documentsDirectory;
			private var alias: String;
			private var identification: String;
			
			private var path: String;
			private var scientific: String;
			
			private var taxonomyResolutionService:TaxonomyResolutionService;
			
			
			
		 	public function refreshTilelist():void {
		 		//GEt first images not grouped
		 		dao.openConnection("SELECT scientific,path,id, (select count(id) from photos where group_id=g.id) AS group_total FROM groups as g");
				sqlArray = dao.dbResult;

		 		//GEt second images not grouped
				dao.openConnection("SELECT scientific,path,id FROM photos WHERE group_id is NULL");
				sqlArray = new ArrayCollection(sqlArray.source.concat(dao.dbResult.source));
				chooseState();
		 	}
			
						
			private function onCreationComplete():void {
		    	refreshTilelist();
   			  	imagesDir = dir.nativePath;
				addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, onDropEnter);
				addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, onDrop);
		 	}

		 			 
		 	/* Delete operations */	 	
		 	
		 	public function deleteImage(path:String,num:int):void {
	 			var file:File = new File;
	 			if (num==0) {
		 			dao.openConnection("DELETE FROM photos WHERE path='"+ "file://" + escape(path) +"'");
		 			file.url= "file://" + path;
	 			} else {
	 				dao.openConnection("DELETE FROM photos WHERE path='"+ path +"'");
		 			file.url= path;
	 			}
	 			file.deleteFile();
	 			
	 			for (var i:int=0;i<sqlArray.length;i++) {
 					if (file.url==sqlArray[i].path)
 						break;
	 			}

	 			tilelist.indexToItemRenderer(i).data=null;
	 			sqlArray.removeItemAt(i);
	 			chooseState();
		 	}
		 	
		 	
		 	public function deleteGroupImages(group_id:String):void {
		 		dao.openConnection("SELECT path FROM photos WHERE group_id = '"+group_id+"'");
		 		var result:ArrayCollection = dao.dbResult;
		 		for (var i:int=0; i<result.length; i++) {
		 			var file:File = new File;
		 			file.url= result[i].path;
		 			file.deleteFile();
		 		}
		 		dao.openConnection("DELETE FROM photos WHERE group_id = '"+group_id+"'");
		 		deleteGroup(group_id);
		 	}
		 	
		 	
		 	public function deleteGroup(group_id:String):void {
	 			for (var i:int=0;i<sqlArray.length;i++) {
 					if (group_id==sqlArray[i].id && sqlArray[i].group_total!=undefined)
 						break;
 					
	 			}
	 			dao.openConnection("DELETE FROM groups WHERE id='"+ group_id +"'");
	 			tilelist.indexToItemRenderer(i).data=null;
	 			sqlArray.removeItemAt(i);
	 			chooseState();
		 	}
		 	
		 	
		 	public function deleteImagefromGroup(path:String,num:int):void {
		 		var file:File = new File;
	 			if (num==0) {
		 			dao.openConnection("DELETE FROM photos WHERE path='"+ "file://" + escape(path) +"'");
		 			file.url= "file://" + path;
	 			} else {
	 				dao.openConnection("DELETE FROM photos WHERE path='"+ path +"'");
		 			file.url= path;
	 			}
	 			file.deleteFile();
		 	}
		 	
		 	
		 	private function removeImageTilelist(image_id:int):void {
		 		for (var i:int=0; i<sqlArray.length; i++) {
		 			if (sqlArray[i].id == image_id && sqlArray[i].group_total==undefined ) {
		 				tilelist.indexToItemRenderer(i).data=null;
	 					sqlArray.removeItemAt(i);
	 					break;
		 			}
		 		}
		 	}

		 	
		 	
		 	public function updateName(scientificName:String,path:String):void {
			 	dao.openConnection("UPDATE photos SET scientific='"+scientificName+"' WHERE path='"+path+"'");
		 	}
		 	
		 	

	
	

			
			private function insertImage(object:Object):void {
				dao.openConnection("INSERT INTO photos (path) VALUES('"+object.url+"')");
			  	dao.openConnection("SELECT id FROM photos WHERE path='"+ object.url+"'");
			  	var identification:Object = dao.dbResult[0];
				var original:File = File.userDirectory.resolvePath(object.nativePath);
			  	var newFile:File;
			  	newFile = File.applicationStorageDirectory.resolvePath(imagesDir + "/"+ identification.id +'.'+ object.extension);
			 	dao.openConnection("UPDATE photos SET path='"+newFile.url+"' WHERE path='"+object.url+"'");
			  	original.copyTo(newFile, true);
			  	
			  	//Creation of new item
			  	var obj: Object = new Object();
			  	obj.path = newFile.url;
			  	obj.scientific = null;
			  	obj.lat = null;
			  	obj.lon = null;
			  	obj.id = identification.id;
			  	sqlArray.addItem(obj);
			  	
			  	chooseState();
			}
			
			
			
			/* Check and choose state functions */
			 
		 	private function chooseState():void {
		 		if (sqlArray.length!=0) {
					currentState = "imagesAdded";
				} else {
					currentState = "";
				}
		 	}			
			
			
			private function checkMultipleSelection(event:ListEvent):void {
				if (tilelist.selectedItems.length>1) {
					var result:Object = checkNoMoreTwoGroupsSelected();
					if (!result.valid) {
						currentState = "banSelection";
					} else {
						currentState = "multipleSelection";
						label1.text = "You have selected " + result.count;
						label2.text = "You have selected " + result.count;						
					}
				} else {
					chooseState();
				}
			}
			
			
			
			private function checkNoMoreTwoGroupsSelected():Object {
				var result:Object = new Object();
				result.count = 0;
				result.valid = true;
				var numGroups:int = 0;
				for (var i:int = 0; i<tilelist.selectedItems.length; i++) {
					if (tilelist.selectedItems[i].group_total!=undefined) {
						if (numGroups<1) {
							result.count = result.count + tilelist.selectedItems[i].group_total;
							numGroups++;
						} else {
							result.valid = false;
							return result;
						}						
					} else {
						result.count++;
					}
				}
				return result;
			}
			
			
			
			/* Create group */
			
			private function createGroup():void {
				//Create group in our Database
				var group_data:Object = new Object();
				var photos_ids_str:String = '';
				var imagesIdsArray: Array = new Array();
				
				if (existGroupOnSelectedItems().group) {
					//If there is a group in the selected items
					var isThereGroup: Object = existGroupOnSelectedItems();
					isThereGroup.selected_count = tilelist.selectedItems.length - 1;
					for (var j:int=0; j<tilelist.selectedItems.length; j++) {
						if (tilelist.selectedItems[j].group_total==undefined) {
							photos_ids_str += tilelist.selectedItems[j].id + ',';
							imagesIdsArray.push(tilelist.selectedItems[j].id);
							
						} else {
							tilelist.selectedItems[j].group_total = tilelist.selectedItems[j].group_total + isThereGroup.selected_count;
						}
					}
					
					for (var k:int=0; k<imagesIdsArray.length; k++) {					
	 					removeImageTilelist(imagesIdsArray[k]);
					}
					
					
					photos_ids_str = photos_ids_str.substr(0,photos_ids_str.length-1);
		     		dao.openConnection("UPDATE photos SET group_id="+isThereGroup.group_id+" where id in ("+photos_ids_str+")");				
				} else {
					//If there isn't a group in the selected items
					group_data.count = tilelist.selectedItems.length;
					for (var i:int=0; i<tilelist.selectedItems.length; i++) {
						if (group_data.scientific==undefined && tilelist.selectedItems[i].scientific != null) {
							group_data.scientific = tilelist.selectedItems[i].scientific;
						}
						if (group_data.path==undefined) {
							group_data.path = tilelist.selectedItems[i].path;
						}
						if (group_data.lat==undefined && tilelist.selectedItems[i].lat != null) {
							group_data.lat = tilelist.selectedItems[i].lat;
							group_data.lon = tilelist.selectedItems[i].lon;
						}						
						photos_ids_str += tilelist.selectedItems[i].id + ',';
						imagesIdsArray.push(tilelist.selectedItems[i].id);
						
					}
					
					for (var z:int=0; z<imagesIdsArray.length; z++) {					
						removeImageTilelist(imagesIdsArray[z]);
					}

					dao.openConnection("INSERT INTO groups (scientific,path,lat,lon) VALUES ('"+group_data.scienfitic+"','"+group_data.path+"','"+group_data.lat+"','"+group_data.lon+"')");
					dao.openConnection("SELECT id FROM groups order by id DESC LIMIT 1");
					var group_identification:String = dao.dbResult[0].id;
					
					//Create the group and added to the tilelist
					var obj: Object = new Object();
			  		obj.path = group_data.path;
			  		obj.scientific = group_data.scienfitic;
			  		obj.lat = group_data.lat;
			  		obj.lon = group_data.lon;
			  		obj.id = group_identification;
			  		obj.group_total = group_data.count;
			  		sqlArray.addItem(obj);					
					
					photos_ids_str = photos_ids_str.substr(0,photos_ids_str.length-1);
		     		dao.openConnection("UPDATE photos SET group_id="+group_identification+" where id in ("+photos_ids_str+")");					
				}
				tilelist.selectedIndices = new Array();
				chooseState();
			}
			
			
			
			
			private function existGroupOnSelectedItems():Object {
				var result:Object = new Object();
				result.group = false;
				result.group_id = 0;
				for (var i:int=0; i<tilelist.selectedItems.length; i++) {
					if (tilelist.selectedItems[i].group_total!=undefined) {
						result.group_id = tilelist.selectedItems[i].id;
						result.group = true;
						return result;
					}
				}
				return result;
			}
			
			
			
			
			
			/* ------- Image Selection ------- */
			
			private function selectImageFile(root:File):void {
				var imgFilter:FileFilter = new FileFilter("Images", "*.jpg;*.jpeg;*.gif;*.png,*.JPG;*.JPEG;*.GIF;*.PNG");
				root.browseForOpenMultiple("Open", [imgFilter]);
			  	root.addEventListener(FileListEvent.SELECT_MULTIPLE, fileSelected);
			}
			
			private function fileSelected(event:FileListEvent):void {
				var files:Array = event.files as Array;
				var i: int = files.length;
			  	for (var j:int = 0; j < i; j++) {
				    insertImage(files[j]);
				}
			}
			
			
			
			
			/* ------- Drop functionality ------- */
			
			private function onDropEnter(event:NativeDragEvent):void {
	 			NativeDragManager.acceptDragDrop(tilelist);
	   		}
	   		
			private function onDrop(event:NativeDragEvent):void {
				NativeDragManager.dropAction = NativeDragActions.COPY;
			    var droppedFiles:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
			    for each (var file:File in droppedFiles) {
			    	if (file.isDirectory) {						
					     var dirContents:Array = file.getDirectoryListing();
					     for each (var fi:File in dirContents) {
							insertImage(fi);
			    		 }	
			    	} else {
				    	insertImage(file);
			    	}			       
			    }
			    tilelist.selectedIndices = new Array();
			}
			

		]]>
	</mx:Script>
	<mx:DropShadowFilter id="headerShadow" alpha="0.3" color="#000000" angle="90" blurY="10" distance="8"/>
	
	<mx:Canvas width="100%" height="100%" top="37"/>
	
	<mx:VBox width="100%" height="100%" verticalGap="0" horizontalAlign="center">
		<mx:Canvas height="37" width="100%" styleName="infoUpOrangeBkg" filters="{[headerShadow]}" backgroundSize="100%" id="canvas1">
			<mx:HBox horizontalCenter="0" verticalCenter="0" id="headerHBox">
				<mx:Canvas  id="canvas2">
	    			<mx:Label text="Add some photos to FlickrTagger" x="11" verticalCenter="1" styleName="txtInfoUpShadow" alpha="0.3" horizontalCenter="0" id="label2"/>
	    			<mx:Label text="Add some photos to FlickrTagger" x="10" verticalCenter="0" styleName="txtInfoUp" horizontalCenter="0" id="label1"/>
				</mx:Canvas>
			</mx:HBox>

	    </mx:Canvas>
	    <mx:Spacer height="10"/>
		<comp:TileListFlickTagger backgroundAlpha="0" selectionColor="#4a4a4a" selectionDisabledColor="#4a4a4a" rollOverColor="#4a4a4a" id="tilelist"  dataProvider="{sqlArray}"
				itemRenderer="com.vizzuality.views.main.components.ImageRenderer" minWidth="440" width="80%" height="100%" borderThickness="0" itemClick="checkMultipleSelection(event)"
				allowMultipleSelection="true" dragEnabled="true" dragMoveEnabled="true" styleName="imagesContent"/>					
	</mx:VBox>
	
	<components:EmptySectionPhoto  horizontalCenter="0" verticalCenter="0" width="315" height="180" visible="true" id="emptySelectionPhoto" addImage="selectImageFile(fileToOpen)"/>
	
	
	
</mx:Canvas>